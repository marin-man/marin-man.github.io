<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>慢慢的个人博客</title>
        <link>https://marin-man.github.io/</link>
        <description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description>
        <generator>Hugo 0.92.2 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>marin-man@163.com (慢慢)</managingEditor>
        
        
            <webMaster>marin-man@163.com (慢慢)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Wed, 30 Mar 2022 18:07:05 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://marin-man.github.io/rss.xml" />
        
        
            <item>
                <title>网易实习面经</title>
                <link>https://marin-man.github.io/posts/interview-wangyi/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/interview-wangyi/</guid>
                <pubDate>Mon, 28 Mar 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;网易互娱&#34;&gt;网易互娱&lt;/h2&gt;
&lt;h3 id=&#34;1面-2022-03-23&#34;&gt;1面 (2022-03-23)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;项目&lt;/li&gt;
&lt;li&gt;用 Redis 做注册中心如何感知服务上线和下线&lt;/li&gt;
&lt;li&gt;100 万请求同时从 Redis 取相同的 Key，如何优化&lt;/li&gt;
&lt;li&gt;Redis 做分布式锁，获取锁时锁的状态改变后但响应消息丢失了，会造成什么问题，如何解决&lt;/li&gt;
&lt;li&gt;Sleuth 的底层实现，信息采样的底层实现&lt;/li&gt;
&lt;li&gt;文件上传漏洞攻击、如何防止&lt;/li&gt;
&lt;li&gt;FastDFS 的架构实现&lt;/li&gt;
&lt;li&gt;写一个文件备份的程序要考虑哪些&lt;/li&gt;
&lt;li&gt;Linux 的常见命令&lt;/li&gt;
&lt;li&gt;在不用 top 指令的情况下，如何通过写代码获取整台机器的负载情况&lt;/li&gt;
&lt;li&gt;ThreadLocal&lt;/li&gt;
&lt;li&gt;什么是 ORM 架构&lt;/li&gt;
&lt;li&gt;为什么用 Mybatis，优点&lt;/li&gt;
&lt;li&gt;多对多和一对多的表设计&lt;/li&gt;
&lt;li&gt;Raft、Paxos&lt;/li&gt;
&lt;li&gt;RPC 和 HTTP 的区别&lt;/li&gt;
&lt;li&gt;服务端发送四段响应数据，如何保证这四段数据有序，不丢失。&lt;/li&gt;
&lt;li&gt;负载均衡的实现&lt;/li&gt;
&lt;li&gt;一致性哈希算法&lt;/li&gt;
&lt;li&gt;多路复用、et 和 lt&lt;/li&gt;
&lt;li&gt;docker 为什么能部署服务&lt;/li&gt;
&lt;li&gt;docker 构建镜像的过程&lt;/li&gt;
&lt;li&gt;聚簇索引和非聚簇索引，哪些采用了聚簇，哪些采用非聚簇&lt;/li&gt;
&lt;li&gt;一段数据库代码，如何构建索引，为什么这么构建&lt;/li&gt;
&lt;li&gt;什么是回表&lt;/li&gt;
&lt;li&gt;如何快速的查询地址（模糊查询、倒排索引）&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E9%9D%A2%E7%BB%8F/">面经</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>腾讯实习面经</title>
                <link>https://marin-man.github.io/posts/interview-tencent/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/interview-tencent/</guid>
                <pubDate>Mon, 28 Mar 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;北极光&#34;&gt;北极光&lt;/h2&gt;
&lt;h3 id=&#34;1-面-2022-01-21&#34;&gt;1 面 (2022-01-21)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;算法：
&lt;ul&gt;
&lt;li&gt;翻转链表&lt;/li&gt;
&lt;li&gt;LRU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目&lt;/li&gt;
&lt;li&gt;redis 原子操作原理&lt;/li&gt;
&lt;li&gt;mysql
&lt;ul&gt;
&lt;li&gt;执行引擎&lt;/li&gt;
&lt;li&gt;Innodb 和 MySam 区别&lt;/li&gt;
&lt;li&gt;聚簇索引和非聚簇索引的区别&lt;/li&gt;
&lt;li&gt;行锁和表锁&lt;/li&gt;
&lt;li&gt;mysql 会出现死锁吗，怎么检测死锁，怎么避免死锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FastDFS
&lt;ul&gt;
&lt;li&gt;如何实现&lt;/li&gt;
&lt;li&gt;是否是一致性&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RocketMQ
&lt;ul&gt;
&lt;li&gt;MQ 作用，RocketMQ 怎么实现&lt;/li&gt;
&lt;li&gt;MQ 是否是消息安全的，如何实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;悲观锁和乐观锁&lt;/li&gt;
&lt;li&gt;Synchronized 实现，锁升级&lt;/li&gt;
&lt;li&gt;分布式一致性算法（Paxos、raft、zab）&lt;/li&gt;
&lt;li&gt;多路复用（select、poll、epoll），et 和 lt 区别&lt;/li&gt;
&lt;li&gt;redis 主从，gossip 协议，cluster，redlock&lt;/li&gt;
&lt;li&gt;tcp
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;li&gt;如何保证可靠&lt;/li&gt;
&lt;li&gt;什么时候需要重传&lt;/li&gt;
&lt;li&gt;窗口的大小如何协商&lt;/li&gt;
&lt;li&gt;三次握手和四次回收&lt;/li&gt;
&lt;li&gt;msl 时间是多长&lt;/li&gt;
&lt;li&gt;如何避免 time_wait 过多，过多如何解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程、线程、协程的区别&lt;/li&gt;
&lt;li&gt;协程实现和线程的区别&lt;/li&gt;
&lt;li&gt;虚函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;云架构&#34;&gt;云架构&lt;/h2&gt;
&lt;h3 id=&#34;1面-2022-03-14&#34;&gt;1面 (2022-03-14)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Redis 可以用来做什么&lt;/li&gt;
&lt;li&gt;单点登录&lt;/li&gt;
&lt;li&gt;怎么防止 MQ 挂掉服务还可用&lt;/li&gt;
&lt;li&gt;Raft 算法原理&lt;/li&gt;
&lt;li&gt;Raft 怎么选主，冲突解决&lt;/li&gt;
&lt;li&gt;多路复用&lt;/li&gt;
&lt;li&gt;负载均衡实现&lt;/li&gt;
&lt;li&gt;UTXO 模型&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2面-2022-03-18&#34;&gt;2面 (2022-03-18)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;项目架构&lt;/li&gt;
&lt;li&gt;三次握手&lt;/li&gt;
&lt;li&gt;网络四层模型&lt;/li&gt;
&lt;li&gt;应用层有哪些协议&lt;/li&gt;
&lt;li&gt;这次通话用到哪些协议&lt;/li&gt;
&lt;li&gt;KCP 协议&lt;/li&gt;
&lt;li&gt;路由选择协议 ，OSPF&lt;/li&gt;
&lt;li&gt;DDOS 攻击&lt;/li&gt;
&lt;li&gt;Sync 攻击&lt;/li&gt;
&lt;li&gt;输入一个域名后经历的协议&lt;/li&gt;
&lt;li&gt;排序算法&lt;/li&gt;
&lt;li&gt;稳定性为什么重要&lt;/li&gt;
&lt;li&gt;top 指令，前五行有哪些指标&lt;/li&gt;
&lt;li&gt;什么是运营开发&lt;/li&gt;
&lt;li&gt;是否考研&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E9%9D%A2%E7%BB%8F/">面经</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>蚂蚁实习面经</title>
                <link>https://marin-man.github.io/posts/interview-ali/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/interview-ali/</guid>
                <pubDate>Mon, 28 Mar 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;1面-2022-03-09&#34;&gt;1面 (2022-03-09)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ACID&lt;/li&gt;
&lt;li&gt;char 和 varchar，varchar(100) 和 varchar(1000)&lt;/li&gt;
&lt;li&gt;索引设计思路&lt;/li&gt;
&lt;li&gt;最左原则&lt;/li&gt;
&lt;li&gt;OSI 七层模型 和 TCP/IP 四层模型&lt;/li&gt;
&lt;li&gt;三次握手和四次挥手&lt;/li&gt;
&lt;li&gt;为什么不能两次握手&lt;/li&gt;
&lt;li&gt;为什么不能三次挥手&lt;/li&gt;
&lt;li&gt;输入 url 的请求全过程&lt;/li&gt;
&lt;li&gt;Http 响应码&lt;/li&gt;
&lt;li&gt;Https 协议&lt;/li&gt;
&lt;li&gt;CAP&lt;/li&gt;
&lt;li&gt;Java 线程的状态&lt;/li&gt;
&lt;li&gt;Hashmap&lt;/li&gt;
&lt;li&gt;什么是线程安全&lt;/li&gt;
&lt;li&gt;创建多个线程的方式&lt;/li&gt;
&lt;li&gt;线程池的工作流程&lt;/li&gt;
&lt;li&gt;Java 内存结构&lt;/li&gt;
&lt;li&gt;Threadlocal&lt;/li&gt;
&lt;li&gt;Java 继承几个父类，实现几个接口&lt;/li&gt;
&lt;li&gt;Session 和 Cookie 的区别&lt;/li&gt;
&lt;li&gt;IOC 和 AOP&lt;/li&gt;
&lt;li&gt;BIO、NIO、AIO&lt;/li&gt;
&lt;li&gt;为什么想去找实习&lt;/li&gt;
&lt;li&gt;在实习的时候主要负责什么东西&lt;/li&gt;
&lt;li&gt;在团队中是什么角色&lt;/li&gt;
&lt;li&gt;团队是怎么分工的&lt;/li&gt;
&lt;li&gt;在合作过程中有没有陷入困难&lt;/li&gt;
&lt;li&gt;除了技术上，对你自身有什么成长&lt;/li&gt;
&lt;li&gt;如果团队有成员退出，你会怎么处理&lt;/li&gt;
&lt;li&gt;你在团队是偏执行还是偏决策&lt;/li&gt;
&lt;li&gt;为什么会把自己逼得那么紧&lt;/li&gt;
&lt;li&gt;什么原因让你有主动性去推进项目&lt;/li&gt;
&lt;li&gt;怎么跟团队里的人沟通&lt;/li&gt;
&lt;li&gt;你的交流别人的反馈，都会接收你的观点吗&lt;/li&gt;
&lt;li&gt;有出现别人质疑你的观点吗，然后如何解决&lt;/li&gt;
&lt;li&gt;如果到新的领域，你会怎么去学习&lt;/li&gt;
&lt;li&gt;在团队中有遇到冲突吗，如何解决&lt;/li&gt;
&lt;li&gt;你在大学生涯中遇到的最大困难，（除了技术上的）&lt;/li&gt;
&lt;li&gt;同学如何评价你的优缺点&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-面-2022-03-12&#34;&gt;2 面 (2022-03-12)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ArrayList、LinkedList、vector&lt;/li&gt;
&lt;li&gt;Hashmap、concurrentmap&lt;/li&gt;
&lt;li&gt;乐观锁和悲观锁&lt;/li&gt;
&lt;li&gt;什么样的场景适合乐观锁和悲观锁&lt;/li&gt;
&lt;li&gt;死锁，避免死锁&lt;/li&gt;
&lt;li&gt;i++ 是否是线程安全&lt;/li&gt;
&lt;li&gt;线程池执行逻辑&lt;/li&gt;
&lt;li&gt;分布式事务，TCC，confirm 超时怎么处理&lt;/li&gt;
&lt;li&gt;数据库事务&lt;/li&gt;
&lt;li&gt;内存管理机制&lt;/li&gt;
&lt;li&gt;CAP 和 BASE 理论&lt;/li&gt;
&lt;li&gt;BASE 理论的应用场景&lt;/li&gt;
&lt;li&gt;一致性哈希算法&lt;/li&gt;
&lt;li&gt;普通哈希和哈希环的差异&lt;/li&gt;
&lt;li&gt;500 M 内存，10 G 文件，统计前 100 个出现次数最多的单词&lt;/li&gt;
&lt;li&gt;出现连接重置的情况，背后有什么网络工作原理&lt;/li&gt;
&lt;li&gt;域名污染&lt;/li&gt;
&lt;li&gt;RocketMQ 宕机了导致消息发送不出去&lt;/li&gt;
&lt;li&gt;Eureka 为什么保证可用性&lt;/li&gt;
&lt;li&gt;Paxos 算法和 Raft 算法&lt;/li&gt;
&lt;li&gt;Raft 怎么选主&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-面-2022-03-14&#34;&gt;3 面 (2022-03-14)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Apache Dolphinscheduler 简介&lt;/li&gt;
&lt;li&gt;怎么评价你的功能的影响力和价值&lt;/li&gt;
&lt;li&gt;怎么去接触这些项目，怎么规划自己的时间&lt;/li&gt;
&lt;li&gt;你的代码量有多少&lt;/li&gt;
&lt;li&gt;平时怎么学习&lt;/li&gt;
&lt;li&gt;哪个项目最有压力，怎么解决&lt;/li&gt;
&lt;li&gt;优点、缺点&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hr-面-2022-03-22&#34;&gt;hr 面 (2022-03-22)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;是否考虑读研&lt;/li&gt;
&lt;li&gt;为什么考研比较卷&lt;/li&gt;
&lt;li&gt;为找工作做了那些准备&lt;/li&gt;
&lt;li&gt;如何学习的&lt;/li&gt;
&lt;li&gt;如果给小白推荐的话，你推荐哪些视频，书籍，博客&lt;/li&gt;
&lt;li&gt;美团的博客和阿里博客的区别&lt;/li&gt;
&lt;li&gt;哪个学习经历让影响你最深&lt;/li&gt;
&lt;li&gt;视频的哪一个内容让你印象深刻&lt;/li&gt;
&lt;li&gt;是否在实践中用到了你看视频看到的这种技术&lt;/li&gt;
&lt;li&gt;项目介绍&lt;/li&gt;
&lt;li&gt;项目的目标，你是怎么去实现&lt;/li&gt;
&lt;li&gt;项目的挑战&lt;/li&gt;
&lt;li&gt;项目遇到的最大困难&lt;/li&gt;
&lt;li&gt;描述一下自己&lt;/li&gt;
&lt;li&gt;有面了多少家&lt;/li&gt;
&lt;li&gt;为什么不打算读研&lt;/li&gt;
&lt;li&gt;家庭情况&lt;/li&gt;
&lt;li&gt;在工作中除了技能的提升，还想提升哪些方面的能力&lt;/li&gt;
&lt;li&gt;你现在在提升这些能力上做了哪些努力&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E9%9D%A2%E7%BB%8F/">面经</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>顺丰实习面经</title>
                <link>https://marin-man.github.io/posts/interview-shunfen/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/interview-shunfen/</guid>
                <pubDate>Mon, 28 Mar 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;顺丰科技&#34;&gt;顺丰科技&lt;/h2&gt;
&lt;h3 id=&#34;1-面-2022-01-22&#34;&gt;1 面 (2022-01-22)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;项目&lt;/li&gt;
&lt;li&gt;FastDFS，如何保证性能和高可用&lt;/li&gt;
&lt;li&gt;怎么学习新知识&lt;/li&gt;
&lt;li&gt;接口如何测试&lt;/li&gt;
&lt;li&gt;跨域问题&lt;/li&gt;
&lt;li&gt;Redis 如何实现分布式锁&lt;/li&gt;
&lt;li&gt;并发有哪些案例，如何解决&lt;/li&gt;
&lt;li&gt;RocketMQ 如何保证消息不丢失，如何实现幂等&lt;/li&gt;
&lt;li&gt;Restful&lt;/li&gt;
&lt;li&gt;vue 了解多少&lt;/li&gt;
&lt;li&gt;springcloud 是什么&lt;/li&gt;
&lt;li&gt;服务治理&lt;/li&gt;
&lt;li&gt;软件开发模式：敏捷开发，迭代开发&lt;/li&gt;
&lt;/ol&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E9%9D%A2%E7%BB%8F/">面经</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>图数据库</title>
                <link>https://marin-man.github.io/posts/graph-database/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/graph-database/</guid>
                <pubDate>Sun, 20 Mar 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;图数据库（Graph Database）是基于图论实现的一种新型 NoSQL 数据库。他的数据存储结构和数据的查询方式都是以图论为基础的。图论中图的基本元素为节点和边，在图数据库中对应的就是节点和关系。&lt;/p&gt;
&lt;p&gt;在图数据库中，数据与数据之间的关系通过节点和关系构成一个图结构并在此结构上实现数据库的所有特性：对图数据对象进行创建、读取、更新、删除等操作，还有处理事务的能力和高可用性。&lt;/p&gt;
&lt;p&gt;随着社交、电商、金融、零售、物联网等行业的快速发展，现实社会织起了了一张庞大而复杂的关系网，传统数据库很难处理关系运算。图数据库也随之应运而生。&lt;/p&gt;
&lt;p&gt;图数据库有很多的使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社交领域：Facebook, Twitter，Linkedin 用它来管理社交关系，实现好友推荐；&lt;/li&gt;
&lt;li&gt;零售领域 ：eBay，沃尔玛使用它实现商品实时推荐，给买家更好的购物体验；&lt;/li&gt;
&lt;li&gt;金融领域 ：摩根大通，花旗和瑞银等银行在用图数据库做风控处理；&lt;/li&gt;
&lt;li&gt;电信领域 ：Verizon, Orange 和 AT&amp;amp;T 等电信公司依靠图数据库来管理网络，控制访问并支持客户 360；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;neo4j&#34;&gt;Neo4j&lt;/h2&gt;
&lt;p&gt;Neo4j 是由 java 实现的开源 NoSQL 图书库。Neo4j 实现了专业数据库级别的图数据库模型的存储。&lt;/p&gt;
&lt;p&gt;Neo4j 最初的设计动机是为了更好地描述实体之间地联系。现实生活中，每个实体都与周围地其他实体有着千丝万缕的关系，这些关系里存在着大量的潜在信息。但是传统关系型数据库更加注重刻画实体内部的属性，实体与实体之间的关系主要通过外键来实现。因此，在查询一个实体的关系时需要 join 操作，特别时深层次的关系查询需要大量的 join 操作，而 join 操作通常又非常耗时。随着现实世界中关系数据的急剧增加，导致关系型数据库已经主键地难以承载查询海量数据的深层次关系的操作。&lt;/p&gt;
&lt;h3 id=&#34;1-neo4j-的数据类型&#34;&gt;1. Neo4j 的数据类型&lt;/h3&gt;
&lt;p&gt;Neo4j 有两种数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点：节点类似于 E-R 图中的实体，每一个实体可以有零个或多个属性，这些属性以 key-value 的形式存在。属性没有特殊的类型要求，同时每个节点还具有相应的标签，用来区分不同类型的节点；&lt;/li&gt;
&lt;li&gt;关系：关系也类似于 E-R 图中的边，一个关系有起始节点和终止节点（即边上连接的两个点），与节点一样，关系也能够有自己的属性和标签（指明这个是什么关系：朋友、亲戚等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../images/content/neo4j.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;节点和关系分别采用固定长度存储，每个节点记录的长度为 9 字节，格式为：&lt;code&gt;Node:inUse+nextRelId+nextProId&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inUse：1 表示该节点被正常使用，0 表示该节点被删除&lt;/li&gt;
&lt;li&gt;nextRelId：该节点的下一个关系 ID&lt;/li&gt;
&lt;li&gt;nextPropId：该节点的下一个属性 ID，属性 Id 通过链表的形式来关联，即有查询该节点下的所有属性，需要通过遍历下一指针的方式找出所有的属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个关系记录的长度为 33 字节，格式为： 
&lt;code&gt;Relationship:inUse+firstNode+secondNode+relType+firstPrevRelId+firstNextRelId+secondPrevRelId+secondNextRelId+nextPropId&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inUse：1 表示该节点被正常使用，0 表示该节点被删除&lt;/li&gt;
&lt;li&gt;nextPropId：该节点的下一个属性 ID&lt;/li&gt;
&lt;li&gt;relType：关系的类型&lt;/li&gt;
&lt;li&gt;firstNode、secondNode：这个关系关联的两个节点，为起始节点和终止节点&lt;/li&gt;
&lt;li&gt;firstPrevRelId、firstNextRelId：起始节点的前一个和后一个关系的 ID&lt;/li&gt;
&lt;li&gt;secondPrevRelId、secondNextRelId：终止节点的前一个和后一个关系的 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-neo4j-遍历方式&#34;&gt;2. Neo4j 遍历方式&lt;/h3&gt;
&lt;p&gt;每个节点记录都包含一个指向该节点的第一个属性的指针和关系链中的第一个关系的指针。要读取一个节点的属性，从指向第一个属性的指针开始，遍历整个单向链表；要找到一个节点的关系，从指向的第一个关系开始，遍历整个双向链表，直到找到了感兴趣的关系&lt;/p&gt;
&lt;p&gt;下面通过一个例子来说明 Neo4j 遍历关系和节点的详细过程。加入在 Neo4j 中存储了 A、B、C、D、E 5 个节点和 R1、R2、R3、R4、R5、R6、R7，7 个关系，它们之间的关系如下：
&lt;img src=&#34;../../images/content/neo4j-1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;假如遍历图中节点 B 的所有关系，只需要向 NODEB-NEXT 方向遍历，直到指向 NULL 为止，可以从下图中看出节点 B 的所有关系为 R1、R2、R3、R4、R5。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/content/neo4j-2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过固定大小的存储记录和指针 ID，只要跟随指针就可以简单地实现遍历并且高速执行。要遍历一个节点到另一个节点的特定关系，在 Neo4j 中只需遍历几个指针，然后执行一些低成本的 ID 计算即可，这相较于全局索引的时间复杂度要低很多，这就是 Neo4j 实现高速遍历的秘密。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从一个给定节点定位关系链中第一个关系的位置，可以通过计算它在关系存储的偏移量来获得。跟获得节点存储位置的方法一样，使用关系 ID 乘以关系记录的固定大小即可找到关系在存储文件中的正确位置&lt;/li&gt;
&lt;li&gt;在关系记录中，搜索第二个字段可以找到第二个节点的 ID，用节点记录大小乘以节点 ID 可以得到节点在存储中的正确位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-neo4j-的存储优化&#34;&gt;3. Neo4j 的存储优化&lt;/h3&gt;
&lt;p&gt;Neo4j 支持存储优化（压缩和内联存储属性值），对于某些短字符的属性可以直接存储在属性文件中。在实际操作中，像邮政编码、电话号码这样的短字符串属性就可以&lt;strong&gt;直接内联到属性存储文件，而不是单独地放在另一个动态存储区&lt;/strong&gt;，这就大幅减少 I/O 操作并且增大吞吐量，因为只有一个文件需要访问。&lt;/p&gt;
&lt;p&gt;除了内联属性值，Neo4j 还可以对属性名称地空间严格维护，例如在社交网络中，有可能会有多个节点存在 first_name 和 last_name 这样的属性，如果将每个属性都逐字写入磁盘上就会造成存储浪费。因此，替代方案是属性名通过属性索引文件从属性存储中间接引用。&lt;strong&gt;属性索引允许所有具有相同名称的属性共享单个记录。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使现在的磁盘访问速度已经很快了，但是 CPU 访问磁盘仍然比 CPU 直接访问高速缓存要慢得多。因此，Neo4j 采用了缓存策略，保证那些经常访问的数据可以快速地被多次重复访问。Neo4j 高速缓存地页面置换算法是基于最不经常使用地页置换（LFU）。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Neo4j 权威指南》-张帜&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/563eb4cde6dd?utm_campaign=haruki&#34;&gt;究竟什么是图数据库，它有哪些应用场景？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93/">图数据库</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>分布式事务</title>
                <link>https://marin-man.github.io/posts/distributed-transaction/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/distributed-transaction/</guid>
                <pubDate>Sun, 13 Mar 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;什么是事务&#34;&gt;什么是事务&lt;/h2&gt;
&lt;p&gt;事务有四大特性：原子性、一致性、隔离性、持久性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子性：事务的指令要么都发生，要么都不发生&lt;/li&gt;
&lt;li&gt;隔离性：不同的事务之间通过一定的策略来防止相互之间的干扰（有读未提交、读已提交、可重复读、串行化读四种）&lt;/li&gt;
&lt;li&gt;一致性：指程序的执行要确保逻辑一致，例如 A 给 B 转 100，那么 A 一定要扣 100（不能只扣 50），B 一定要加 100（不能只加 50）&lt;/li&gt;
&lt;li&gt;持久性：事务执行后的数据一定要持久到硬盘中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是分布式事务&#34;&gt;什么是分布式事务&lt;/h2&gt;
&lt;p&gt;分布式业务中，我们需要通过 RPC 去调用下游服务，使得整个服务即能解耦，又能完成业务场景。那么如何去保证自身调用多个下游服务后，每个下游服务都能成功或都回退掉，这就需要分布式事务来保证了。&lt;/p&gt;
&lt;p&gt;常见的分布式事务有：2PC、3PC、TCC、本地消息表、MQ 事务消息、Sagas 事务模型等。&lt;/p&gt;
&lt;h2 id=&#34;2pc两阶段提交&#34;&gt;2PC（两阶段提交）&lt;/h2&gt;
&lt;p&gt;两阶段提交使用 XA 协议，必须要依赖于数据库的事务，其原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段：事务协调器要求每个涉及到事务的数据库预提交（precommit）此操作，并向协调器反馈是否可以提交&lt;/li&gt;
&lt;li&gt;第二阶段：每个服务有返回可以提交，则协调器发送指令让所有服务提交，否则让所有服务回滚。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：尽量保证数据的强一致性，代码编写也比较简单&lt;/p&gt;
&lt;p&gt;缺点：依赖于数据库提供的事务方案，如果出现一些不基于数据库的功能，如短信发送等，则不能用此模型，同时其为了保证数据的一致性，牺牲了可用性。&lt;/p&gt;
&lt;h2 id=&#34;3pc三阶段提交&#34;&gt;3PC（三阶段提交）&lt;/h2&gt;
&lt;p&gt;三阶段提交和两阶段提交类似，只不过其添加了一层来判断各服务是否可用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一阶段：给各服务发送信号，查看各服务是否可用&lt;/li&gt;
&lt;li&gt;第二阶段：跟 2PC 的第一阶段一样&lt;/li&gt;
&lt;li&gt;第三阶段：跟 2PC 的第二阶段一样&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点：与 2PC 相比，先去判断各服务是否可用，从而避免了一些服务不可用，但其他服务还傻乎乎的去执行预提交指令，从而提高服务性能。&lt;/p&gt;
&lt;p&gt;缺点：跟 2PC 一样。&lt;/p&gt;
&lt;h2 id=&#34;tcc补偿事务&#34;&gt;TCC（补偿事务）&lt;/h2&gt;
&lt;p&gt;TCC 核心思想：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作，他分为三个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try 阶段：对业务系统做检测以及资源预留&lt;/li&gt;
&lt;li&gt;Confirm 阶段：对业务系统做确认提交，默认 Confirm 阶段是不会出错的（即 Try 成功，Confirm 成功），但也不能绝对保证不会出错&lt;/li&gt;
&lt;li&gt;Cancel 阶段：在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子，加入 Bob 要向 Smith 转账，思路大概是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事务协调器调用远程接口，把 Smith 和 Bob 的账户冻结起来&lt;/li&gt;
&lt;li&gt;在 Confirm 阶段，执行远程调用的转账操作，转账成功进行解冻&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1346890&#34;&gt;分布式事务数据库事务CAP定理BASE理论分布式事务案例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>DDos 攻击</title>
                <link>https://marin-man.github.io/posts/network-ddos/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/network-ddos/</guid>
                <pubDate>Mon, 28 Feb 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;什么是-ddos-攻击&#34;&gt;什么是 DDos 攻击&lt;/h2&gt;
&lt;p&gt;DDos 攻击就是利用网络上被攻陷的电脑作为肉鸡，然后通过一定方式组合成数量庞大的讲师网络，采用一对多的方式进行控制，向目标系统提出服务请求。&lt;/p&gt;
&lt;h2 id=&#34;有哪些常见的-ddos-攻击&#34;&gt;有哪些常见的 DDos 攻击&lt;/h2&gt;
&lt;p&gt;ICMP Flood、UDP Flood、NTF Flood、SYN Flood、CC Flood、DNS Query Flood、HashDos 等。&lt;/p&gt;
&lt;h3 id=&#34;1-imcp-flood&#34;&gt;1. IMCP Flood&lt;/h3&gt;
&lt;p&gt;CMP 用于在 IP 主机，路由器之间传递控制消息，控制消息是指网络通不通，主机是否可达，路由是否可用等网络本身的消息，虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。通过对目标系统发送海量数据报，就可以令目标主机瘫痪，如果大量发送，就成了洪水攻击。&lt;/p&gt;
&lt;h3 id=&#34;2-udp-flood&#34;&gt;2. UDP Flood&lt;/h3&gt;
&lt;p&gt;UDP 协议是一种无连接的服务，在 UDP Flood 中，攻击者通常发送大量伪造 IP 地址的小 UDP 包冲击 DNS 服务器或 Radius 认证服务器，流媒体视频服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;del&gt;上述传统的流量型攻击方式技术含量较低，伤人一千，自损八百，攻击效果通常依赖受控主机本身的网络性能，而且容易被查到攻击源头，单独使用的情况已不常见。&lt;/del&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-ntp-flood&#34;&gt;3. NTP Flood&lt;/h3&gt;
&lt;p&gt;NTP 是标准的基于 UDP 协议传输的网络时间同步协议，由于 UDP 协议的无连接性，方便伪造地址。攻击者使用特殊的数据报，也就是 IP 地址指向作为反射器的服务器，源 IP 地址被伪造成攻击目标的 IP，反射器收到数据包时就被骗了，会将响应数据发送给被攻击对象，耗尽目标网络的带宽资源。一般的 NTP 服务器都有很大的带宽，攻击者可能只需要 1Mbps 的上传带宽欺骗 NTP 服务器，就可以给目标服务器带来几百上千 Mbps 的攻击流量。&lt;/p&gt;
&lt;h3 id=&#34;4-syn-flood&#34;&gt;4. SYN Flood&lt;/h3&gt;
&lt;p&gt;这是一种利用 TCP 协议缺陷，发送大量伪造 TCP 连接请求，从而使得被攻击方资源耗尽的攻击。建立 TCP 连接需要三次握手。SYN Flood 就是用户向服务器发送报文后突然司机或掉线，那么服务器在发出应答报文后就无法收到客户端的确认，这时服务器一般会重试并等待一段时间后再丢弃这个未完成的连接。一个用户出现异常导致服务器的一个线程等待一会并不是大问题，但恶意攻击者大量模拟这种情况，服务器为了维护数以千计的半连接而消耗非常多的资源。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封 ip：通过布隆过滤器，封掉短时间内大量相同的 ip&lt;/li&gt;
&lt;li&gt;减少服务端握手时的等待时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-cc-攻击&#34;&gt;5. CC 攻击&lt;/h3&gt;
&lt;p&gt;CC 攻击是目前应用层攻击的主要手段之一，借助代理服务器生成指向目标系统的合法请求，实现伪装和 DDos。我们都有这样的体验，访问一个静态页面，即使人多也不需要太长时间，但如果在高峰访问论坛，贴吧，就很慢了，因为服务器需要到数据库中判断访问者是否有读帖，发言等权限。&lt;/p&gt;
&lt;h3 id=&#34;6-dns-query-flood&#34;&gt;6. DNS Query Flood&lt;/h3&gt;
&lt;p&gt;DNS Query Flood 采用的方式是操控大量傀儡机，向域名服务器发送大量的域名解析请求。通常攻击者请求解析的域名是随机生成或网络上根本不存在的域名，由于再本地无法找到对应的结果，服务器必须递归查询上传域名服务器，引起连锁反应。解析过程给服务器带来很大的负载，每秒钟服务解析请求超过一定的数量就会造成 DNS 服务器解析域名超时，从而导致一个网络中域名解析服务的崩塌。&lt;/p&gt;
&lt;h3 id=&#34;7-hashdos&#34;&gt;7. HashDos&lt;/h3&gt;
&lt;p&gt;Hash 碰撞攻击。随着 RESTful 风格的普及，我们默认会使用 json 格式作为数据传递的方式。但 json 转字符串的对象默认会存储在 Hash Table，而 Hash Table 很容易被碰撞攻击。&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/">网络攻防</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>数据链路层</title>
                <link>https://marin-man.github.io/posts/network-link-layer/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/network-link-layer/</guid>
                <pubDate>Sun, 20 Feb 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h3 id=&#34;什么是数据链路层的基本特征&#34;&gt;什么是数据链路层的基本特征&lt;/h3&gt;
&lt;p&gt;数据链路层的基本特征为：封装成帧，透明传输，差错检测。&lt;/p&gt;
&lt;h3 id=&#34;什么是封装成帧&#34;&gt;什么是封装成帧&lt;/h3&gt;
&lt;p&gt;慢慢：封装成帧就是在一段数据的前后分别添加首部和尾部，从而构成一个帧。所有互联网上传送的数据都是以分组（IP 数据报）为传送单位，网络层的 IP 数据报传送到数据链路层就成为帧的数据部分，再添加首部和尾部，构成一个完整的帧。&lt;/p&gt;
&lt;h3 id=&#34;什么是透明传输&#34;&gt;什么是透明传输&lt;/h3&gt;
&lt;p&gt;由于帧的开始和结束的标记使用专门的控制字符。但如果数据中出现了开始或结束字符，我们应当想方法让他们保持原意，于是就得要通过转移字符。让数据链路层看不到妨碍数据传输的东西，就叫做透明传输。&lt;/p&gt;
&lt;h3 id=&#34;什么是差错检测&#34;&gt;什么是差错检测&lt;/h3&gt;
&lt;p&gt;现实中的通信链路都不会是理想的，也就是说比特在传输中可能会出现差错。数据链路层采用循环冗余法（CRC）来检测传输过来的数据是否有差错，如果有，则直接抛弃。&lt;/p&gt;
&lt;h3 id=&#34;什么是-csmacd-协议&#34;&gt;什么是 CSMA/CD 协议&lt;/h3&gt;
&lt;p&gt;CSMA/CD (Carrier Sense Multiple Access with Collision Detection)，即载波监听，多点接入，碰撞检测。&lt;/p&gt;
&lt;p&gt;以前的以太网是使用总线的形式来传输数据，这样就避免不了总线上的不同点同时发送数据的情况。&lt;/p&gt;
&lt;p&gt;多点接入：许多计算机以多点的方式连接在一条总线上。
载波监听：用电子技术检测总线上有没有其他计算机也在发送。不管在发送前还是在发送中，每个站都必须不同地检测信道。在发送前检测信道是为了判断信道没有人发送，获得发送权。在发送中检测信道是为了即使发现有没有其他站地发送和本站发送的碰撞。
碰撞检测：虽然在发送前需要检测信道为空才能发送信息，但也有一种情况发生：两个站都没有检测到信道被占用，并几乎同时发送信息，就像两个小朋友同时举手发言。当发现碰撞检测时，两个站都会取消发送，同时发出人为干扰信号，通知其他点也不要发送。然后执行截断二进制退避算法，双方推迟不同的时间发送数据。&lt;/p&gt;
&lt;p&gt;但现在的网络采用了星形结构来传输，所以不会出现信号在一条线上发生冲突的情况。&lt;/p&gt;
&lt;h3 id=&#34;什么是-mac-地址&#34;&gt;什么是 MAC 地址&lt;/h3&gt;
&lt;p&gt;MAC 地址又称为物理地址或硬件地址。每个网卡，路由器都有一个对应的 MAC 地址。&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/">计算机网络</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>网络架构</title>
                <link>https://marin-man.github.io/posts/network-based/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/network-based/</guid>
                <pubDate>Sun, 20 Feb 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h3 id=&#34;什么是-osi-七层模型&#34;&gt;什么是 OSI 七层模型&lt;/h3&gt;
&lt;p&gt;OSI(Open System Interconnection Reference Model)，是一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准架构。&lt;/p&gt;
&lt;p&gt;七层模型为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物理层：制定底层数据传输的标准，如机械特性，电器特性和功能特性，网线和网卡标准等。&lt;/li&gt;
&lt;li&gt;数据链路层：定义数据的格式，如何传输，如何标识，主要为封装成帧，透明传输，差错检测。&lt;/li&gt;
&lt;li&gt;网络层：定义 IP 编址，定义路由功能。&lt;/li&gt;
&lt;li&gt;传输层：端到端传输数据的基本传输。&lt;/li&gt;
&lt;li&gt;会话层：控制应用层序之间会话能力，如将不同软件数据分发给不同软件。&lt;/li&gt;
&lt;li&gt;表示层：数据格式标识，基本压缩，加密功能等。&lt;/li&gt;
&lt;li&gt;应用层：各种应用程序，包括 web 应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一层实现各自的功能和协议，并完成与相邻层的接口通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../../images/content/network.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;什么是五层模型&#34;&gt;什么是五层模型&lt;/h3&gt;
&lt;p&gt;五层模型将网络分为物理层，数据链路层，网络层，应用层。&lt;/p&gt;
&lt;h3 id=&#34;两者有什么关系呢&#34;&gt;两者有什么关系呢？&lt;/h3&gt;
&lt;p&gt;OSI 七层协议是一个标准，而非实现，五层模型是一个实现的应用模型，五层模型由七层简化合并而来。&lt;/p&gt;
&lt;h3 id=&#34;不同层的数据被称为什么&#34;&gt;不同层的数据被称为什么？&lt;/h3&gt;
&lt;p&gt;在物理层时数据称为比特流，链路层时为帧，网络层时为数据报，数据链路层为字节流/字符流。&lt;/p&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/">计算机网络</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>CAP 理论</title>
                <link>https://marin-man.github.io/posts/distribute-cap/</link>
                <guid isPermaLink="true">https://marin-man.github.io/posts/distribute-cap/</guid>
                <pubDate>Sat, 19 Feb 2022 01:12:52 &#43;0800</pubDate>
                
                    <author>marin-man@163.com (慢慢)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h3 id=&#34;什么是-cap-理论&#34;&gt;什么是 CAP 理论&lt;/h3&gt;
&lt;p&gt;CAP 原则指的是一个分布式系统中，Consistency(一致性)，Avaliablity(可用性)，Partition tolerance(分区容错性)，三者不可兼得。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一致性：在分布式环境下，一致性是指数据在多个副本之间能否保持一致的特性。&lt;/li&gt;
&lt;li&gt;可用性：可用性是指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。&lt;/li&gt;
&lt;li&gt;分区容错性：分区容错性约束了一个分布式系统具有如下特性：分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么三者不能同时满足&#34;&gt;为什么三者不能同时满足&lt;/h3&gt;
&lt;p&gt;假设现在有两台服务器，一台跑 A 服务和数据库 V1，一台跑服务 B 和数据库 V2，V1 和 V2 是同步的。在满足分区容错性下，A 或 B 一台宕机都不会影响到其他服务的执行。但当 V1 和 V2 的通信断开时，数据库就不能同步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;牺牲一致性：A 用 v1 的数据库，B 用 v2 的数据库，两者都没有同步&lt;/li&gt;
&lt;li&gt;牺牲可用性：禁止 A 和 B 正常服务，直到两种能同步才开启服务。&lt;/li&gt;
&lt;li&gt;牺牲分区容错性：如果不用分区容错性，则整个系统可以不用分布式来搭建，能保证强一致性和可用性，但如果机器挂了，整个服务也崩了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么是-base-理论&#34;&gt;什么是 BASE 理论&lt;/h3&gt;
&lt;p&gt;BASE 就是 Basically Available(基本可用)，Soft state(软状态)，Eventually consistent(最终一致性)，是对 CAP 中一致性和可用性权衡的结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本可用：指分布式在出现不可预知故障的时候，允许损失部分可用性。
&lt;ul&gt;
&lt;li&gt;响应时间上的损失：一个在线搜索引擎需要 0.5s 内返回给用户相应的查询结果，但由于出现异常（比如系统部分机房发送端点或断网故障）查询结果的响应时间增加到了 1~2s&lt;/li&gt;
&lt;li&gt;功能上的损失：在购物高峰时，为了保证购物系统的稳定性，部分消费者可能会被引导到一个降级页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软状态：指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性。
最终一致性：系统中的所有数据副本，在经过一段时间的同步后，最终能够到达一个一致的状态。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                
                
                    
                    
                    
                        
                        
                        
                            
                                <category domain="https://marin-man.github.io/posts/">posts\</category>
                            
                        
                    
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/categories/2022/">2022</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://marin-man.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
